var Tree = require('easy-tree')
var HashTable = require('hashtable')
var rules = new HashTable()

rules.put('VPVBDNP', [1, 0])
rules.put('VPVBADJP', [1, 0])
rules.put('VPVBDNP-TMP', [1, 0])
rules.put('VPVBPPP', [1, 0])
rules.put('VPVBPS', [1, 0])
rules.put('VPRBS', [1, 0])
rules.put('VPVBDNPNP-TMP', [2, 0, 1])
rules.put('VPVBDNPPP', [2, 1, 0])
rules.put('VPVBDNPPPPP', [3, 2, 1, 0])
rules.put('VPVBGNPPP', [2, 1, 0])
rules.put('VPVBPNPSBAR', [2, 1, 0])
rules.put('SBARINSCCRB', [3, 0, 1, 2])
rules.put('VPVBDS', [1, 0])
rules.put('VPVBS', [1, 0])
rules.put('VPVBPRT', [1, 0])
rules.put('VPVBFRAG', [1, 0])
rules.put('VPVBNP', [1, 0])
rules.put('VPVBDPP', [1, 0])
rules.put('VPVBDVP', [1, 0])
rules.put('VPVBGNP', [1, 0])
rules.put('VPVBGS', [1, 0])
rules.put('VPVBGPP', [1, 0])
rules.put('VPVBGPPS', [2, 1, 0])
rules.put('VPVBDRBNP', [2, 0, 1])
rules.put('VPVBDRBVP', [2, 0, 1])
rules.put('VPVBDRBPP', [2, 0, 1])
rules.put('VPVBDPPS', [2, 0, 1])
rules.put('VPVBDPPPP', [2, 0, 1])
rules.put('VPVBZPPS', [2, 0, 1])
rules.put('VPVBZVP', [1, 0])
rules.put('VPVBZNP', [1, 0])
rules.put('VPVBNNP', [1, 0])
rules.put('VPVBNADVP', [1, 0])
rules.put('VPVBNNPTMP', [1, 0])
rules.put('VPVBPVP', [1, 0])
rules.put('VPVBPSBAR', [1, 0])
rules.put('VPVBSBAR', [1, 0])
rules.put('VPVBVP', [1, 0])
rules.put('VPVBNVP', [1, 0])
rules.put('VPVBGVP', [1, 0])
rules.put('VPVBGADJP', [1, 0])
rules.put('VPVBZADJP', [1, 0])
rules.put('VPVBPADVP', [1, 0])
rules.put('VPVBPADVPVP', [2, 0, 1])
rules.put('VPVBPADVPPP', [2, 0, 1])
rules.put('VPVBPNPADVP', [2, 1, 0])
rules.put('VPVBPADJP', [1, 0])
rules.put('VPVBPNPNP-TMP', [2, 1, 0])
rules.put('VPVBDPRT', [1, 0])
rules.put('VPVBZPP', [1, 0])
rules.put('VPVBNP-TMP', [1, 0])
rules.put('VPVBADVP', [1, 0])
rules.put('VPVBZADVP', [1, 0])
rules.put('VPVBDADJP', [1, 0])
rules.put('VPVBDADVP', [1, 0])
rules.put('VPVBDINTJ', [1, 0])
rules.put('VPVBZNPADVP', [2, 1, 0])
rules.put('VPVBZNPADVP', [2, 1, 0])
rules.put('VPMDVP', [1, 0])
rules.put('VPVBPNP', [1, 0])
rules.put('VPVBNPADVP', [2, 1, 0])
rules.put('VPVBCCVBNP', [1, 2, 3, 0])
rules.put('VPVBPRTPP', [1, 2, 0])
rules.put('VPVBNPADVPPP', [3, 2, 1, 0])
rules.put('VPVBNPPRTPP', [3, 2, 1, 0])
rules.put('VPVBNNPADVP', [2, 1, 0])
rules.put('VPVBNPRTPP', [2, 1, 0])
rules.put('VPVBNNPPP', [2, 1, 0])
rules.put('VPVBNADVPVP', [2, 0, 1])
rules.put('VPVBZNPNP-TMP', [2, 1, 0])
rules.put('VPVBZADJPNP', [2, 1, 0])
rules.put('VPVBNPNP-TMP', [2, 1, 0])
rules.put('VPVBZNPPP', [2, 0, 1])
rules.put('VPVBZNPSBAR', [2, 1, 0])
rules.put('VPADVPVBZNP', [0, 2, 1])
rules.put('VPVBZRBADJP', [1, 2, 0])
rules.put('VPVBZRBVP', [2, 0, 1])
rules.put('VPADVPVBPNP', [0, 2, 1])
rules.put('VPADVPVBPS', [0, 2, 1])
rules.put('VPADVPVBDNP', [0, 2, 1])
rules.put('VPADVPVBGNP', [0, 2, 1])
rules.put('VPVBDSNP-TMP', [2, 1, 0])
rules.put('VPVBNPNP', [2, 0, 1])
rules.put('VPVBPP', [1, 0])
rules.put('VPVBPPPP', [2, 0, 1])
rules.put('VPVBPPNP-TMP', [2, 1, 0])
rules.put('VPVBNPP', [1, 0])
rules.put('VPVBNS', [1, 0])
rules.put('VPVBNSBAR', [1, 0])
rules.put('VPTOVP', [1, 0])
rules.put('VPMDADVPVP', [2, 0, 1])
rules.put('VPMDRBVP', [2, 0, 1])
rules.put('VPVBZS', [1, 0])
rules.put('VPVBDPPNP-TMP', [2, 0, 1])
rules.put('VPVBNPPP', [2, 0, 1])
rules.put('VPVBNPS', [2, 0, 1])
rules.put('VPVBDNPSBAR', [1, 0, 2])
rules.put('VPVBDNPADVP', [2, 1, 0])
rules.put('VPVBDNPS', [2, 1, 0])
rules.put('VPVBDADVPVP', [2, 0, 1])
rules.put('VPVBDADVPPP', [2, 0, 1])
rules.put('VPVBDADVPADVP', [2, 0, 1])
rules.put('VPVBDADVPSBAR', [2, 1, 0])
rules.put('VPVBADVPPP', [2, 1, 0])
rules.put('VPVBGADVPPP', [2, 1, 0])
rules.put('VPVBGPPNP-TMP', [2, 1, 0])
rules.put('VPVBGPPNP', [2, 1, 0])
rules.put('VPVBNSSBAR', [2, 0, 1])
rules.put('VPVBPRBVP', [2, 0, 1])
rules.put('VPVBADVPVP', [2, 0, 1])
rules.put('VPVBPRBADJP', [1, 2, 0])
rules.put('VPNNADVP', [1, 0])
rules.put('VPRBVBNP', [2, 1, 0])
rules.put('NPNNNN', [0, 1])
rules.put('NPNNNNS', [1, 0])
rules.put('NPNPPP', [1, 0])
rules.put('NPADJPNNS', [1, 0])
rules.put('NPPDTDTNNS', [2, 0, 1])
rules.put('NPDTNNNN', [1, 2, 0])
rules.put('NPNPPPPP', [2, 1, 0])
rules.put('NPRBRBDTNN', [0, 3, 1, 2])
rules.put('SINVVPNP', [1, 0])
rules.put('SINVFRAGVPNP', [0, 1, 2])
rules.put('SINVVBDNPVP', [2, 0, 1])
rules.put('SINVVBZNP', [1, 0])
rules.put('SBARVBDS', [1, 0])
rules.put('SBARWHADVPS', [1, 0])
rules.put('SBARINS', [1, 0])
rules.put('PPINS', [1, 0])
rules.put('PPINADJP', [1, 0])
rules.put('PPINNP', [1, 0])
rules.put('PPTONP', [1, 0])
rules.put('WHPPTOWHNP', [1, 0])
rules.put('WHNPWPNP', [0, 1])
rules.put('WHPPINWHNP', [1, 0])
rules.put('ADJPRBVBN', [1, 0])
rules.put('ADJPRBJJPP', [2, 1, 0])
rules.put('ADJPJJS', [1, 0])
rules.put('ADJPJJPP', [1, 0])
rules.put('ADJPJJRB', [1, 0])
rules.put('ADVPINNP', [1, 0])
rules.put('FRAGVPS', [1, 0])
rules.put('SQVBDNP', [1, 0])
rules.put('SQVBZNP', [1, 0])
rules.put('SQVBPNP', [1, 0])
rules.put('SQVBZNPNP', [2, 0, 1])
rules.put('SQVBZNPADVP', [2, 1, 0])
rules.put('SQVBZNPADVP', [2, 0, 1])
rules.put('SQVBZNPVP', [2, 0, 1])
rules.put('SQVBZNPVP', [2, 0, 1])
rules.put('SQVBZNPPP', [2, 0, 1])
rules.put('SQVBZNPADJP', [2, 0, 1])
rules.put('SQVBZNPADJP', [2, 0, 1])
rules.put('SQVBDNPADJP', [2, 0, 1])
rules.put('SQVBPNPADJP', [2, 0, 1])
rules.put('SQVBPNPADJP', [2, 0, 1])
rules.put('SQVBPNPADJP', [2, 0, 1])
rules.put('SQVBDNPADJP', [2, 0, 1])
rules.put('SQVBPVPADJP', [2, 0, 1])
rules.put('SQVBPNPVP', [2, 0, 1])
rules.put('SQVBPNPPP', [2, 0, 1])
rules.put('SQVBPNPPP', [2, 0, 1])
rules.put('SQVBPNPVP', [2, 0, 1])
rules.put('SQVBPNPS', [2, 0, 1])
rules.put('SQVBDNPVP', [2, 0, 1])
rules.put('SQVBDNPPP', [2, 0, 1])
rules.put('SQVBDNPPP', [2, 0, 1])
rules.put('SQMDVP', [1, 0])
rules.put('SQMDNPVP', [2, 0, 1])
rules.put('WHNPWHNPPP', [1, 0])
rules.put('QPJJRINCD', [2, 1, 0])
rules.put('NPPDTPRP$NN', [1, 0, 2])
rules.put('VPVBGADVP', [1, 0])
rules.put('VPVBDPPSBAR', [2, 1, 0])
rules.put('NPNPSBAR', [1, 0])
rules.put('ADJPADJPPP', [1, 0])
rules.put('VPVBZRBNP', [2, 1, 0])
rules.put('VPVBZNPNP', [2, 0, 1])
rules.put('VPVBGNPPPNP', [3, 2, 1, 0])
rules.put('VPVBDNPNP', [2, 0, 1])
rules.put('VPVBZPPNP-TMP', [2, 1, 0])
rules.put('SQMDNPADVPVP', [3, 0, 1, 2])
rules.put('SQVPNPADVPNP', [3, 0, 2, 1])
rules.put('SQPPVBZNPPP', [0, 3, 2, 1])
rules.put('VPVBDPPPNP-TMP', [3, 2, 1, 0])
rules.put('VPVBNPPPNP-TMP', [3, 2, 1, 0])
rules.put('VPVBDPRTNP', [2, 1, 0])
rules.put('VPVBPRTNPSBAR', [1, 2, 0, 3])
rules.put('VPVBNNPSBAR', [2, 0, 1])
rules.put('FRAGADVPNP', [1, 0])
rules.put('VPVBGNPNP', [2, 1, 0])
rules.put('ADVPRBRB', [1, 0])
rules.put('FRAGVPNP', [1, 0])
rules.put('VPVBDPRTPPNP-TMP', [2, 3, 1, 0])
rules.put('VPVBDPRTNPPP', [2, 3, 1, 0])
rules.put('NPPDTDTNNSCCNNS', [4, 0, 1, 2, 3])
rules.put('SLSTNPVP', [0, 2, 1])
rules.put('SBARQWHNPSQ', [1, 0, 2])
rules.put('VPVBDPRTPP', [1, 2, 0])

function reorder (node) {
  var key = node.tag
  for (var i = 0; i < node.children.length; i++) {
    if (node.children[i].tag !== '.') {
      key += node.children[i].tag
    }
  }
  var order = rules.get(key)
  if (order) {
    var temp = []
    for (i = 0; i < order.length; i++) {
      temp.push(node.prune([0]))
    }
    for (i = order.length - 1; i >= 0; i--) {
      node.prepend([], temp[order[i]])
    }
  }
  for (i = 0; i < node.children.length; i++) {
    if (node.children[i].children.length > 0) {
      reorder(node.children[i])
    }
  }
}

function treeTransform (input) {
  var tree = new Tree(input)
  reorder(tree)
  var op = ''
  tree.walk([], function (path, node) {
    if (node.tex) {
      op += node.tex + ' '
    }
  })
  return op
}

module.exports = {
  tree: treeTransform,
  reorder: reorder
}
